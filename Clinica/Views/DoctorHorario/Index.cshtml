@model List<Clinica.Models.DoctorHorario>
@{
    ViewBag.Title = "Doctor Horarios";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var doctores = ViewBag.Doctores as List<Clinica.Models.Doctor>;
}
<div class="container-fluid mt-4">
    <h2>Doctor Horarios</h2>
    <div class="card mt-3">
        <div class="card-header">
            <i class="fa fa-list"></i> Doctor Horario
        </div>
        @if (TempData["Error"] != null)
        {
            <br />
            <div class="alert alert-danger text-center">@TempData["Error"]</div>
        }
        @if (TempData["Success"] != null)
        {
            <br />
            <div class="alert alert-success text-center" id="successMsg">@TempData["Success"]</div>
        }
        <div class="card-body">
            <button class="btn btn-outline-success mb-3" data-bs-toggle="modal" data-bs-target="#doctorHorarioModal">
                Nuevo Horario
            </button>
            <table id="doctorHorariosTable" class="table table-bordered table-hover align-middle">
                <thead>
                    <tr>
                        <th>Nro Documento</th>
                        <th>Doctor</th>
                        <th>Mes</th>
                        <th>Hora Inicio AM</th>
                        <th>Hora Fin AM</th>
                        <th>Hora Inicio PM</th>
                        <th>Hora Fin PM</th>
                        <th>Fecha Creación</th>
                        <th>Acción</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var horario in Model)
                    {
                        <tr>
                            <td>@horario.Doctor.NumeroDocumentoIdentidad</td>
                            <td>@horario.Doctor.Nombres @horario.Doctor.Apellidos</td>
                            <td>@(horario.NumeroMes.HasValue ? System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(horario.NumeroMes.Value) : "")</td>
                            <td>@(horario.HoraInicioAM.HasValue ? DateTime.Today.Add(horario.HoraInicioAM.Value).ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture) : "")</td>
                            <td>@(horario.HoraFinAM.HasValue ? DateTime.Today.Add(horario.HoraFinAM.Value).ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture) : "")</td>
                            <td>@(horario.HoraInicioPM.HasValue ? DateTime.Today.Add(horario.HoraInicioPM.Value).ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture) : "")</td>
                            <td>@(horario.HoraFinPM.HasValue ? DateTime.Today.Add(horario.HoraFinPM.Value).ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture) : "")</td>
                            <td>@(horario.FechaCreacion.HasValue ? horario.FechaCreacion.Value.ToString("dd/MM/yyyy") : "")</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-danger btn-sm btn-eliminar"
                                            data-id="@horario.IdDoctorHorario"
                                            data-doctor="@horario.Doctor.Nombres @horario.Doctor.Apellidos"
                                            title="Eliminar horario">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-primary btn-sm btn-reporte"
                                            data-id="@horario.IdDoctorHorario"
                                            title="Descargar reporte PDF">
                                        <i class="bi bi-file-earmark-pdf"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal Crear Doctor Horario -->
<div class="modal fade" id="doctorHorarioModal" tabindex="-1" aria-labelledby="doctorHorarioModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            @using (Html.BeginForm("Create", "DoctorHorario", FormMethod.Post, new { id = "formCrearHorario", autocomplete = "off" }))
            {
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="doctorHorarioModalLabel">Nuevo Horario</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                    
                    <div class="mb-2">
                        <label for="IdDoctor" class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().IdDoctor): <span class="text-danger">*</span></label>
                        @Html.DropDownList("IdDoctor", new SelectList(doctores, "IdDoctor", "Nombres"), "Seleccionar doctor...", new { @class = "form-select", id = "IdDoctor" })
                        @Html.ValidationMessage("IdDoctor", "", new { @class = "text-danger small" })
                    </div>
                    <div class="mb-2">
                        <label for="NumeroMes" class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().NumeroMes): <span class="text-danger">*</span></label>
                        @Html.DropDownList("NumeroMes", new SelectList(Enumerable.Range(DateTime.Now.Month, 13 - DateTime.Now.Month).Select(m => new { Value = m, Text = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m) }), "Value", "Text"), "Seleccionar mes...", new { @class = "form-select", id = "NumeroMes" })
                        @Html.ValidationMessage("NumeroMes", "", new { @class = "text-danger small" })
                    </div>
                    <div class="mb-2">
                        <label for="DiasAtencion" class="form-label">Días Atención: <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="ui_DiasAtencion" placeholder="Haz clic para seleccionar días" />
                        <input type="hidden" name="DiasAtencion" id="DiasAtencion" />
                        @Html.ValidationMessage("DiasAtencion", "", new { @class = "text-danger small" })
                        <small class="text-muted">Selecciona los días en el calendario. Deben pertenecer al mismo mes.</small>
                    </div>

                    <div class="row g-2 mt-2">
                        <div class="col-md-6">
                            <label class="form-label">Hora Inicio AM: <span class="text-danger">*</span></label>
                            <input type="text" class="form-control time-ampm" id="ui_HoraInicioAM" list="timesListAM" placeholder="8:00 AM" />
                            <input type="hidden" name="HoraInicioAM" id="HoraInicioAM" />
                            @Html.ValidationMessage("HoraInicioAM", "", new { @class = "text-danger small" })
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Hora Fin AM: <span class="text-danger">*</span></label>
                            <input type="text" class="form-control time-ampm" id="ui_HoraFinAM" list="timesListAM_End" placeholder="12:00 PM" />
                            <input type="hidden" name="HoraFinAM" id="HoraFinAM" />
                            @Html.ValidationMessage("HoraFinAM", "", new { @class = "text-danger small" })
                        </div>
                    </div>
                    <div class="row g-2 mt-2">
                        <div class="col-md-6">
                            <label class="form-label">Hora Inicio PM: <span class="text-danger">*</span></label>
                            <input type="text" class="form-control time-ampm" id="ui_HoraInicioPM" list="timesListPM" placeholder="2:00 PM" />
                            <input type="hidden" name="HoraInicioPM" id="HoraInicioPM" />
                            @Html.ValidationMessage("HoraInicioPM", "", new { @class = "text-danger small" })
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Hora Fin PM: <span class="text-danger">*</span></label>
                            <input type="text" class="form-control time-ampm" id="ui_HoraFinPM" list="timesListPM_End" placeholder="6:00 PM" />
                            <input type="hidden" name="HoraFinPM" id="HoraFinPM" />
                            @Html.ValidationMessage("HoraFinPM", "", new { @class = "text-danger small" })
                        </div>
                    </div>

                    <!-- Datalist por periodo -->
                    <datalist id="timesListAM"></datalist>
                    <datalist id="timesListAM_End"></datalist>
                    <datalist id="timesListPM"></datalist>
                    <datalist id="timesListPM_End"></datalist>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="submit" class="btn btn-primary">Guardar</button>
                </div>
            }
        </div>
    </div>
</div>


<!-- Modal Confirmar Eliminación -->
<div class="modal fade" id="eliminarDoctorHorarioModal" tabindex="-1" aria-labelledby="eliminarDoctorHorarioLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form action="/DoctorHorario/Delete" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="IdDoctorHorario" id="del_IdDoctorHorario" />
                <div class="modal-header">
                    <h5 class="modal-title" id="eliminarDoctorHorarioLabel">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro que desea eliminar el horario de <strong id="del_Doctor"></strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-danger">Eliminar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal Confirmar descarga PDF -->
<div class="modal fade" id="confirmDescargarHorarioModal" tabindex="-1" aria-labelledby="confirmDescargarHorarioLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDescargarHorarioLabel">Confirmar descarga</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                ¿Desea descargar el PDF del horario seleccionado?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <a id="btnConfirmarDescargaHorario" class="btn btn-primary" href="#">Sí, descargar</a>
            </div>
        </div>
    </div>
</div>

<!-- Iframe oculto para iniciar la descarga sin salir de la página -->
<iframe id="hiddenDownloadFrame" style="display:none; width:0; height:0; border:0;" tabindex="-1" aria-hidden="true"></iframe>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.10.0/js/bootstrap-datepicker.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.10.0/locales/bootstrap-datepicker.es.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.10.0/css/bootstrap-datepicker.min.css" rel="stylesheet" />
    <script>
        $(document).ready(function () {
            var dt = $('#doctorHorariosTable').DataTable({
                pageLength: 10,
                lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, 'Todos']],
                order: [],
                language: { url: 'https://cdn.datatables.net/plug-ins/1.13.8/i18n/es-ES.json' }
            });

            // Abrir modal de confirmación para PDF
            $('#doctorHorariosTable').on('click', '.btn-reporte', function () {
                var id = $(this).data('id');
                $('#btnConfirmarDescargaHorario').attr('href', '/DoctorHorario/ReporteHorarioPDF?idDoctorHorario=' + id);
                var modal = new bootstrap.Modal(document.getElementById('confirmDescargarHorarioModal'));
                modal.show();
            });

            // Confirmar descarga: iniciar descarga en iframe oculto y cerrar el modal
            $('#btnConfirmarDescargaHorario').on('click', function (e) {
                e.preventDefault();
                var url = $(this).attr('href');
                if (url && url !== '#') {
                    $('#hiddenDownloadFrame').attr('src', url);
                }
                var modalEl = document.getElementById('confirmDescargarHorarioModal');
                var modalInstance = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
                modalInstance.hide();
            });

            // Meses (para inyectar en edición si el mes del registro es pasado y no está en la lista)
            var monthNames = ['Enero','Febrero','Marzo','Abril','Mayo','Junio','Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre'];

            // Ver detalle
            $('#doctorHorariosTable').on('click', '.btn-ver', function () {
                var btn = $(this);
                $('#view_Doctor').val(btn.data('doctor'));
                $('#view_NumeroDocumento').val(btn.data('doc'));
                $('#view_Mes').val(btn.data('mes') ? btn.data('mes') : '');
                $('#view_DiasAtencion').val(btn.data('dias'));
                $('#view_HoraInicioAM').val(btn.data('horainicioam'));
                $('#view_HoraFinAM').val(btn.data('horafinam'));
                $('#view_HoraInicioPM').val(btn.data('horainiciopm'));
                $('#view_HoraFinPM').val(btn.data('horafinpm'));
                $('#view_FechaCreacion').val(btn.data('fecha'));
                showModal('detalleDoctorHorarioModal');
            });

            // Editar
            $('#doctorHorariosTable').on('click', '.btn-editar', function () {
                var btn = $(this);
                $('#edit_IdDoctorHorario').val(btn.data('id'));
                $('#edit_IdDoctor').val(btn.data('doctorid'));

                var mes = btn.data('mes');
                var $selMes = $('#edit_NumeroMes');
                if (mes && $selMes.find('option[value="' + mes + '"]').length === 0) {
                    var name = monthNames[mes - 1] || ('Mes ' + mes);
                    // Inserta al inicio para que quede visible
                    $selMes.prepend('<option value="' + mes + '">' + name + '</option>');
                }
                $selMes.val(mes);

                $('#edit_DiasAtencion').val(btn.data('dias'));
                $('#edit_HoraInicioAM').val(btn.data('horainicioam'));
                $('#edit_HoraFinAM').val(btn.data('horafinam'));
                $('#edit_HoraInicioPM').val(btn.data('horainiciopm'));
                $('#edit_HoraFinPM').val(btn.data('horafinpm'));
                showModal('editarDoctorHorarioModal');
            });

            // Eliminar
            $('#doctorHorariosTable').on('click', '.btn-eliminar', function () {
                var btn = $(this);
                $('#del_IdDoctorHorario').val(btn.data('id'));
                $('#del_Doctor').text(btn.data('doctor'));
                showModal('eliminarDoctorHorarioModal');
            });

            function showModal(id = null) {
                if (!id) return;
                var el = document.getElementById(id);
                var modal = bootstrap.Modal.getOrCreateInstance(el, { backdrop: true, keyboard: true });
                modal.show();
            }

            // ---------- Utilidades de tiempo ----------
            function toAmPm(h, m) {
                var am = h < 12;
                var hour12 = h % 12; if (hour12 === 0) hour12 = 12;
                var mm = m < 10 ? ('0' + m) : m;
                return hour12 + ':' + mm + ' ' + (am ? 'AM' : 'PM');
            }
            function to24h(value) {
                if (!value) return null;
                var v = value.trim().toUpperCase().replace(/\s+/g, ' ');
                var ampm = null;
                if (v.endsWith(' AM')) { ampm = 'AM'; v = v.replace(' AM', ''); }
                else if (v.endsWith(' PM')) { ampm = 'PM'; v = v.replace(' PM', ''); }

                var parts = v.split(':');
                if (parts.length !== 2) return null;
                var h = parseInt(parts[0], 10);
                var m = parseInt(parts[1], 10);
                if (isNaN(h) || isNaN(m) || h < 0 || h > 23 || m < 0 || m > 59) return null;

                if (ampm) {
                    if (h < 1 || h > 12) return null;
                    if (ampm === 'AM') { if (h === 12) h = 0; }
                    else { if (h !== 12) h = h + 12; }
                }
                var hh = h < 10 ? ('0' + h) : '' + h;
                var mm = m < 10 ? ('0' + m) : '' + m;
                return hh + ':' + mm;
            }
            function normalizeAmPm(v24) {
                if (!v24) return '';
                var parts = v24.split(':'); var h = parseInt(parts[0], 10); var m = parseInt(parts[1], 10);
                return toAmPm(h, m);
            }
            function isAM(v24) {
                if (!v24) return null;
                var h = parseInt(v24.split(':')[0], 10);
                return h < 12;
            }

            // Construir listas por periodo.
            // Si se pasa minExclusive24 (HH:mm), solo se listan horas estrictamente posteriores a ese valor.
            function buildTimesAM(datalistId, minExclusive24) {
                var dl = document.getElementById(datalistId);
                if (!dl) return;
                dl.innerHTML = '';
                for (var h = 0; h < 12; h++) {
                    for (var m = 0; m < 60; m += 30) {
                        var hh = h < 10 ? ('0' + h) : '' + h;
                        var mm = m < 10 ? ('0' + m) : '' + m;
                        var v24 = hh + ':' + mm;
                        if (minExclusive24 && !(v24 > minExclusive24)) continue; // muestra solo posteriores
                        var opt = document.createElement('option');
                        opt.value = toAmPm(h, m);
                        dl.appendChild(opt);
                    }
                }
            }
            function buildTimesPM(datalistId, minExclusive24) {
                var dl = document.getElementById(datalistId);
                if (!dl) return;
                dl.innerHTML = '';
                for (var h = 12; h < 24; h++) {
                    for (var m = 0; m < 60; m += 30) {
                        var hh = h < 10 ? ('0' + h) : '' + h;
                        var mm = m < 10 ? ('0' + m) : '' + m;
                        var v24 = hh + ':' + mm;
                        if (minExclusive24 && !(v24 > minExclusive24)) continue; // muestra solo posteriores
                        var opt = document.createElement('option');
                        opt.value = toAmPm(h, m);
                        dl.appendChild(opt);
                    }
                }
            }

            // Enlazar inputs visibles con los ocultos
            function bindTimeInput(uiId, hiddenId, period, onChange) {
                var $ui = $('#' + uiId);
                var $hidden = $('#' + hiddenId);
                $ui.on('change blur input', function () {
                    var v24 = to24h($ui.val());
                    if (v24) {
                        // Validar periodo correcto (AM o PM)
                        var isAmVal = isAM(v24);
                        if ((period === 'AM' && !isAmVal) || (period === 'PM' && isAmVal)) {
                            $ui.addClass('is-invalid');
                            $hidden.val('');
                            if (typeof onChange === 'function') onChange(null);
                            return;
                        }
                        $hidden.val(v24);
                        $ui.val(normalizeAmPm(v24)).removeClass('is-invalid');
                        if (typeof onChange === 'function') onChange(v24);
                    } else {
                        $hidden.val('');
                        if (typeof onChange === 'function') onChange(null);
                    }
                });
            }

            // Inicializar listas
            buildTimesAM('timesListAM', null);
            buildTimesAM('timesListAM_End', null);
            buildTimesPM('timesListPM', null);
            buildTimesPM('timesListPM_End', null);

            // Cuando se selecciona hora de inicio, la lista de FIN solo muestra horas posteriores
            bindTimeInput('ui_HoraInicioAM', 'HoraInicioAM', 'AM', function (start24) {
                buildTimesAM('timesListAM_End', start24);
                if ($('#HoraFinAM').val() && !($('#HoraFinAM').val() > start24)) {
                    $('#HoraFinAM').val('');
                    $('#ui_HoraFinAM').val('');
                }
            });
            bindTimeInput('ui_HoraFinAM', 'HoraFinAM', 'AM');

            bindTimeInput('ui_HoraInicioPM', 'HoraInicioPM', 'PM', function (start24) {
                buildTimesPM('timesListPM_End', start24);
                if ($('#HoraFinPM').val() && !($('#HoraFinPM').val() > start24)) {
                    $('#HoraFinPM').val('');
                    $('#ui_HoraFinPM').val('');
                }
            });
            bindTimeInput('ui_HoraFinPM', 'HoraFinPM', 'PM');

            // Multi-date picker para Días Atención
            $('#ui_DiasAtencion').datepicker({
                format: 'dd/mm/yyyy',
                multidate: true,
                todayHighlight: true,
                clearBtn: true,
                language: 'es',
                autoclose: false,
                startDate: new Date(),
                daysOfWeekDisabled: [], // Permitir todos los días
                todayBtn: 'linked'
            }).on('changeDate', function (e) {
                var dates = e.dates;
                
                // Validar que todas las fechas sean del mismo mes
                if (dates.length > 0) {
                    var mes = dates[0].getMonth();
                    var valid = dates.every(function (d) { return d.getMonth() === mes; });
                    
                    if (!valid) {
                        alert('Todas las fechas deben pertenecer al mismo mes.');
                        // Filtrar solo las fechas del primer mes seleccionado
                        dates = dates.filter(function (d) { return d.getMonth() === mes; });
                        $('#ui_DiasAtencion').datepicker('setDates', dates);
                    }
                }
                
                // Formatear fechas para mostrar en el input
                var fechasFormateadas = dates.map(function (d) {
                    var dd = String(d.getDate()).padStart(2, '0');
                    var mm = String(d.getMonth() + 1).padStart(2, '0');
                    var yyyy = d.getFullYear();
                    return dd + '/' + mm + '/' + yyyy;
                }).sort();
                
                // Actualizar el campo oculto con las fechas separadas por coma
                $('#DiasAtencion').val(fechasFormateadas.join(', '));
                
                // Mostrar las fechas seleccionadas en el input visible
                if (fechasFormateadas.length > 0) {
                    $('#ui_DiasAtencion').val(fechasFormateadas.join(', '));
                } else {
                    $('#ui_DiasAtencion').val('');
                }
            });

            function updateValidationMessages(form, errors) {
                // Limpiar errores previos
                form.find('.field-validation-error').removeClass('field-validation-error').addClass('field-validation-valid').text('');
                form.find('.validation-summary-errors').removeClass('validation-summary-errors').addClass('validation-summary-valid');
                
                if (errors && Object.keys(errors).length > 0) {
                    var summaryList = form.find('.validation-summary-valid ul, .validation-summary-errors ul');
                    summaryList.empty();
                    
                    $.each(errors, function (fieldName, messages) {
                        // Agregar error al campo específico
                        var fieldValidation = form.find('[data-valmsg-for="' + fieldName + '"]');
                        if (fieldValidation.length > 0 && messages.length > 0) {
                            fieldValidation.removeClass('field-validation-valid').addClass('field-validation-error').text(messages[0]);
                        }
                        
                        // Agregar al resumen
                        if (messages.length > 0) {
                            summaryList.append('<li>' + messages[0] + '</li>');
                        }
                    });
                    
                    // Mostrar el resumen
                    form.find('.validation-summary-valid').removeClass('validation-summary-valid').addClass('validation-summary-errors');
                }
            }

            // Form Crear Horario with AJAX
            $('#formCrearHorario').on('submit', function (e) {
                e.preventDefault();
                
                var form = $(this);
                var submitBtn = form.find('button[type="submit"]');
                submitBtn.prop('disabled', true).text('Guardando...');

                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function (response) {
                        if (response.success) {
                            // Cerrar modal
                            var modal = bootstrap.Modal.getInstance(document.getElementById('doctorHorarioModal'));
                            if (modal) {
                                modal.hide();
                            }
                            // Mostrar mensaje de éxito
                            $('<div class="alert alert-success text-center" role="alert">' + response.message + '</div>')
                                .insertAfter('.card-header')
                                .delay(3000)
                                .fadeOut('slow');
                            // Recargar página para actualizar la tabla
                            setTimeout(function() {
                                location.reload();
                            }, 500);
                        } else if (response.errors) {
                            updateValidationMessages(form, response.errors);
                        }
                    },
                    error: function (xhr) {
                        if (xhr.status === 400 && xhr.responseJSON && xhr.responseJSON.errors) {
                            updateValidationMessages(form, xhr.responseJSON.errors);
                        } else {
                            alert('Error al crear el horario. Por favor intente nuevamente.');
                        }
                    },
                    complete: function () {
                        submitBtn.prop('disabled', false).text('Guardar');
                    }
                });
            });

            // Limpiar errores al abrir modal de crear
            $('#doctorHorarioModal').on('show.bs.modal', function () {
                var form = $('#formCrearHorario');
                form[0].reset();
                $('#HoraInicioAM,#HoraFinAM,#HoraInicioPM,#HoraFinPM,#DiasAtencion').val('');
                $('#ui_HoraInicioAM,#ui_HoraFinAM,#ui_HoraInicioPM,#ui_HoraFinPM,#ui_DiasAtencion').val('').removeClass('is-invalid');
                form.find('.field-validation-error').removeClass('field-validation-error').addClass('field-validation-valid').text('');
                form.find('.validation-summary-errors').removeClass('validation-summary-errors').addClass('validation-summary-valid').find('ul').empty();
                buildTimesAM('timesListAM_End', null);
                buildTimesPM('timesListPM_End', null);
                // Limpiar datepicker
                $('#ui_DiasAtencion').datepicker('clearDates');
            });

            // Ocultar mensaje de éxito o error después de 5 segundos
            setTimeout(function() {
                $('#successMsg').fadeOut('slow');
                $('.alert-danger').fadeOut('slow');
            }, 5000);
        });
    </script>
}