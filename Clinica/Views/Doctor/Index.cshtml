@model List<Clinica.Models.Doctor>
@{
    ViewBag.Title = "Doctores";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var especialidades = ViewBag.Especialidades as List<Clinica.Models.Especialidad>;
}

<div class="container-fluid mt-4">
    <h2>Doctores</h2>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger text-center">@TempData["Error"]</div>
    }
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success text-center">@TempData["Success"]</div>
    }

    <div class="card mt-3">
        <div class="card-header">
            <i class="fa fa-list"></i> Lista de Doctores
        </div>
        <div class="card-body">
            <button class="btn btn-outline-success mb-3" data-bs-toggle="modal" data-bs-target="#doctorModal">
                Nuevo Doctor
            </button>
            <table id="doctoresTable" class="table table-bordered table-hover align-middle">
                <thead>
                    <tr>
                        <th>Nro Documento</th>
                        <th>Nombres</th>
                        <th>Apellidos</th>
                        <th>Género</th>
                        <th>Especialidad</th>
                        <th>Fecha Creación</th>
                        <th>Acción</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var doctor in Model)
                    {
                        <tr>
                            <td>@doctor.NumeroDocumentoIdentidad</td>
                            <td>@doctor.Nombres</td>
                            <td>@doctor.Apellidos</td>
                            <td>@doctor.Genero</td>
                            <td>@doctor.Especialidad.Nombre</td>
                            <td>@(doctor.FechaCreacion.HasValue ? doctor.FechaCreacion.Value.ToString("dd/MM/yyyy") : "")</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button type="button"
                                            class="btn btn-info btn-sm btn-ver"
                                            data-id="@doctor.IdDoctor"
                                            data-doc="@doctor.NumeroDocumentoIdentidad"
                                            data-nombres="@doctor.Nombres"
                                            data-apellidos="@doctor.Apellidos"
                                            data-genero="@doctor.Genero"
                                            data-especialidad="@doctor.Especialidad.Nombre"
                                            data-fecha="@(doctor.FechaCreacion.HasValue ? doctor.FechaCreacion.Value.ToString("dd/MM/yyyy") : "")"
                                            title="Ver doctor">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button type="button"
                                            class="btn btn-warning btn-sm btn-editar"
                                            data-id="@doctor.IdDoctor"
                                            data-doc="@doctor.NumeroDocumentoIdentidad"
                                            data-nombres="@doctor.Nombres"
                                            data-apellidos="@doctor.Apellidos"
                                            data-genero="@doctor.Genero"
                                            data-especialidadid="@doctor.IdEspecialidad"
                                            title="Editar doctor">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button type="button"
                                            class="btn btn-danger btn-sm btn-eliminar"
                                            data-id="@doctor.IdDoctor"
                                            data-nombres="@doctor.Nombres"
                                            data-apellidos="@doctor.Apellidos"
                                            title="Eliminar doctor">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal Crear Doctor -->
<div class="modal fade" id="doctorModal" tabindex="-1" aria-labelledby="doctorModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            @using (Html.BeginForm("Create", "Doctor", FormMethod.Post, new { id = "formCrearDoctor", autocomplete = "off" }))
            {
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="doctorModalLabel">Nuevo Doctor</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="NumeroDocumentoIdentidad" class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().NumeroDocumentoIdentidad): <span class="text-danger">*</span></label>
                            @Html.TextBox("NumeroDocumentoIdentidad", null, new { @class = "form-control", id = "NumeroDocumentoIdentidad" })
                            @Html.ValidationMessage("NumeroDocumentoIdentidad", "", new { @class = "text-danger small" })
                        </div>
                        <div class="col-md-6">
                            <label for="Nombres" class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().Nombres): <span class="text-danger">*</span></label>
                            @Html.TextBox("Nombres", null, new { @class = "form-control", id = "Nombres" })
                            @Html.ValidationMessage("Nombres", "", new { @class = "text-danger small" })
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="Apellidos" class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().Apellidos): <span class="text-danger">*</span></label>
                            @Html.TextBox("Apellidos", null, new { @class = "form-control", id = "Apellidos" })
                            @Html.ValidationMessage("Apellidos", "", new { @class = "text-danger small" })
                        </div>
                        <div class="col-md-6">
                            <label for="Genero" class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().Genero): <span class="text-danger">*</span></label>
                            @Html.DropDownList("Genero", new SelectList(new[] { new { Value = "", Text = "Seleccionar" }, new { Value = "F", Text = "Femenino" }, new { Value = "M", Text = "Masculino" } }, "Value", "Text"), new { @class = "form-select", id = "Genero" })
                            @Html.ValidationMessage("Genero", "", new { @class = "text-danger small" })
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="IdEspecialidad" class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().IdEspecialidad): <span class="text-danger">*</span></label>
                            @Html.DropDownList("IdEspecialidad", new SelectList(especialidades, "IdEspecialidad", "Nombre"), "Seleccionar especialidad...", new { @class = "form-select", id = "IdEspecialidad" })
                            @Html.ValidationMessage("IdEspecialidad", "", new { @class = "text-danger small" })
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="submit" class="btn btn-primary">Guardar</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal Editar Doctor -->
<div class="modal fade" id="editarDoctorModal" tabindex="-1" aria-labelledby="editarDoctorLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            @using (Html.BeginForm("Edit", "Doctor", FormMethod.Post, new { id = "formEditarDoctor", autocomplete = "off" }))
            {
                @Html.AntiForgeryToken()
                @Html.Hidden("IdDoctor", null, new { id = "edit_IdDoctor" })
                <div class="modal-header">
                    <h5 class="modal-title" id="editarDoctorLabel">Editar Doctor</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().NumeroDocumentoIdentidad): <span class="text-danger">*</span></label>
                            @Html.TextBox("NumeroDocumentoIdentidad", null, new { @class = "form-control", id = "edit_NumeroDocumentoIdentidad" })
                            @Html.ValidationMessage("NumeroDocumentoIdentidad", "", new { @class = "text-danger small" })
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().Nombres): <span class="text-danger">*</span></label>
                            @Html.TextBox("Nombres", null, new { @class = "form-control", id = "edit_Nombres" })
                            @Html.ValidationMessage("Nombres", "", new { @class = "text-danger small" })
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().Apellidos): <span class="text-danger">*</span></label>
                            @Html.TextBox("Apellidos", null, new { @class = "form-control", id = "edit_Apellidos" })
                            @Html.ValidationMessage("Apellidos", "", new { @class = "text-danger small" })
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().Genero): <span class="text-danger">*</span></label>
                            @Html.DropDownList("Genero", new SelectList(new[] { new { Value = "", Text = "Seleccionar" }, new { Value = "F", Text = "Femenino" }, new { Value = "M", Text = "Masculino" } }, "Value", "Text"), new { @class = "form-select", id = "edit_Genero" })
                            @Html.ValidationMessage("Genero", "", new { @class = "text-danger small" })
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">@Html.DisplayNameFor(m => m.FirstOrDefault().IdEspecialidad): <span class="text-danger">*</span></label>
                            @Html.DropDownList("IdEspecialidad", new SelectList(especialidades, "IdEspecialidad", "Nombre"), "Seleccionar especialidad...", new { @class = "form-select", id = "edit_IdEspecialidad" })
                            @Html.ValidationMessage("IdEspecialidad", "", new { @class = "text-danger small" })
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Guardar cambios</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal Detalle Doctor -->
<div class="modal fade" id="detalleDoctorModal" tabindex="-1" aria-labelledby="detalleDoctorLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detalleDoctorLabel">Detalle de Doctor</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Nro Documento:</label>
                        <input type="text" class="form-control" id="view_NumeroDocumentoIdentidad" readonly />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Nombres:</label>
                        <input type="text" class="form-control" id="view_Nombres" readonly />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Apellidos:</label>
                        <input type="text" class="form-control" id="view_Apellidos" readonly />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Género:</label>
                        <input type="text" class="form-control" id="view_Genero" readonly />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Especialidad:</label>
                        <input type="text" class="form-control" id="view_Especialidad" readonly />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Fecha creación:</label>
                        <input type="text" class="form-control" id="view_FechaCreacion" readonly />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Confirmar Eliminación -->
<div class="modal fade" id="eliminarDoctorModal" tabindex="-1" aria-labelledby="eliminarDoctorLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form action="/Doctor/Delete" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" id="del_IdDoctor" />
                <div class="modal-header">
                    <h5 class="modal-title" id="eliminarDoctorLabel">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro que desea eliminar al doctor <strong id="del_Nombres"></strong> <strong id="del_Apellidos"></strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-danger">Eliminar</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script>
        $(document).ready(function () {
            var dt = $('#doctoresTable').DataTable({
                pageLength: 10,
                lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, 'Todos']],
                order: [],
                language: { url: 'https://cdn.datatables.net/plug-ins/1.13.8/i18n/es-ES.json' }
            });

            function showModal(id) {
                var el = document.getElementById(id);
                var modal = bootstrap.Modal.getOrCreateInstance(el, { backdrop: 'static', keyboard: false });
                modal.show();
            }

            function hideModal(id) {
                var el = document.getElementById(id);
                var modal = bootstrap.Modal.getInstance(el);
                if (modal) {
                    modal.hide();
                }
            }

            function updateValidationMessages(form, errors) {
                // Limpiar errores previos
                form.find('.field-validation-error').removeClass('field-validation-error').addClass('field-validation-valid').text('');
                form.find('.validation-summary-errors').removeClass('validation-summary-errors').addClass('validation-summary-valid');
                
                if (errors && Object.keys(errors).length > 0) {
                    var summaryList = form.find('.validation-summary-valid ul, .validation-summary-errors ul');
                    summaryList.empty();
                    
                    $.each(errors, function (fieldName, messages) {
                        // Agregar error al campo específico
                        var fieldValidation = form.find('[data-valmsg-for="' + fieldName + '"]');
                        if (fieldValidation.length > 0 && messages.length > 0) {
                            fieldValidation.removeClass('field-validation-valid').addClass('field-validation-error').text(messages[0]);
                        }
                        
                        // Agregar al resumen
                        if (messages.length > 0) {
                            summaryList.append('<li>' + messages[0] + '</li>');
                        }
                    });
                    
                    // Mostrar el resumen
                    form.find('.validation-summary-valid').removeClass('validation-summary-valid').addClass('validation-summary-errors');
                }
            }

            // Form Crear Doctor con AJAX
            $('#formCrearDoctor').on('submit', function (e) {
                e.preventDefault();
                
                var form = $(this);
                var submitBtn = form.find('button[type="submit"]');
                submitBtn.prop('disabled', true).text('Guardando...');

                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function (response) {
                        if (response.success) {
                            // Cerrar modal
                            var modal = bootstrap.Modal.getInstance(document.getElementById('doctorModal'));
                            if (modal) {
                                modal.hide();
                            }
                            // Mostrar mensaje de éxito
                            $('<div class="alert alert-success text-center" role="alert">' + response.message + '</div>')
                                .insertAfter('.card-header')
                                .delay(3000)
                                .fadeOut('slow');
                            // Recargar página para actualizar la tabla
                            setTimeout(function() {
                                location.reload();
                            }, 500);
                        } else if (response.errors) {
                            updateValidationMessages(form, response.errors);
                        }
                    },
                    error: function (xhr) {
                        if (xhr.status === 400 && xhr.responseJSON && xhr.responseJSON.errors) {
                            updateValidationMessages(form, xhr.responseJSON.errors);
                        } else {
                            alert('Error al crear el doctor. Por favor intente nuevamente.');
                        }
                    },
                    complete: function () {
                        submitBtn.prop('disabled', false).text('Guardar');
                    }
                });
            });

            // Form Editar Doctor con AJAX
            $('#formEditarDoctor').on('submit', function (e) {
                e.preventDefault();
                
                var form = $(this);
                var submitBtn = form.find('button[type="submit"]');
                submitBtn.prop('disabled', true).text('Guardando...');

                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function (response) {
                        if (response.success) {
                            // Cerrar modal
                            var modal = bootstrap.Modal.getInstance(document.getElementById('editarDoctorModal'));
                            if (modal) {
                                modal.hide();
                            }
                            // Mostrar mensaje de éxito
                            $('<div class="alert alert-success text-center" role="alert">' + response.message + '</div>')
                                .insertAfter('.card-header')
                                .delay(3000)
                                .fadeOut('slow');
                            // Recargar página para actualizar la tabla
                            setTimeout(function() {
                                location.reload();
                            }, 500);
                        } else if (response.errors) {
                            updateValidationMessages(form, response.errors);
                        }
                    },
                    error: function (xhr) {
                        if (xhr.status === 400 && xhr.responseJSON && xhr.responseJSON.errors) {
                            updateValidationMessages(form, xhr.responseJSON.errors);
                        } else {
                            alert('Error al editar el doctor. Por favor intente nuevamente.');
                        }
                    },
                    complete: function () {
                        submitBtn.prop('disabled', false).text('Guardar cambios');
                    }
                });
            });

            // Limpiar errores y validaciones al abrir modal de crear
            $('#doctorModal').on('show.bs.modal', function () {
                var form = $('#formCrearDoctor');
                form[0].reset();
                form.find('.field-validation-error').removeClass('field-validation-error').addClass('field-validation-valid').text('');
                form.find('.validation-summary-errors').removeClass('validation-summary-errors').addClass('validation-summary-valid').find('ul').empty();
            });

            // Limpiar errores al abrir modal de editar
            $('#editarDoctorModal').on('show.bs.modal', function () {
                var form = $('#formEditarDoctor');
                form.find('.field-validation-error').removeClass('field-validation-error').addClass('field-validation-valid').text('');
                form.find('.validation-summary-errors').removeClass('validation-summary-errors').addClass('validation-summary-valid').find('ul').empty();
            });

            $('#doctoresTable').on('click', '.btn-editar', function () {
                var btn = $(this);
                $('#edit_IdDoctor').val(btn.data('id'));
                $('#edit_NumeroDocumentoIdentidad').val(btn.data('doc'));
                $('#edit_Nombres').val(btn.data('nombres'));
                $('#edit_Apellidos').val(btn.data('apellidos'));
                $('#edit_Genero').val(btn.data('genero'));
                $('#edit_IdEspecialidad').val(btn.data('especialidadid'));
                showModal('editarDoctorModal');
            });

            $('#doctoresTable').on('click', '.btn-ver', function () {
                var btn = $(this);
                $('#view_NumeroDocumentoIdentidad').val(btn.data('doc'));
                $('#view_Nombres').val(btn.data('nombres'));
                $('#view_Apellidos').val(btn.data('apellidos'));
                $('#view_Genero').val(btn.data('genero'));
                $('#view_Especialidad').val(btn.data('especialidad'));
                $('#view_FechaCreacion').val(btn.data('fecha'));
                showModal('detalleDoctorModal');
            });

            $('#doctoresTable').on('click', '.btn-eliminar', function () {
                var btn = $(this);
                $('#del_IdDoctor').val(btn.data('id'));
                $('#del_Nombres').text(btn.data('nombres'));
                $('#del_Apellidos').text(btn.data('apellidos'));
                showModal('eliminarDoctorModal');
            });
        });
    </script>
}